<source>
  @type forward
  @id input2
  port 24224
  bind 0.0.0.0
</source>

#<system>
#  log_level trace
#</system>

# The Docker fluentd logging driver sends events across with the message under key_name 'log';
# Kubernetes/Rancher uses 'message'

#
# Containers that use the TAP logging format
#
<filter docker.idp_{shib-idp,idms-worker}.**>
  @type parser
  key_name log
  #reserve_data true
  #emit_invalid_record_to_error false
  <parse>
    @type regexp
    expression /^(?<application>[^;]*);(?<logfile>[^;]*);(?<env>[^;]*);(?<reserved>[^;]*);(?<message>.*)$/
  </parse>
</filter>

# Kubernetes logs- needs to be redone
#<filter kubernetes.**>
#  @type parser
#  key_name message
#  <parse>
#    @type regexp
#    expression /^(?<application>[^;]*);(?<logfile>[^;]*);(?<env>[^;]*);(?<reserved>[^;]*);(?<message>.*)$/
#  </parse>
#</filter>

# NGINX logs- work-in-progress

#
# NGINX container logs
#
#<filter docker.idp_{proxy,ssl-proxy}.**>
#  @type record_transformer
#  <record>
#    logfile ${tag_parts[1]}
#    message ${record["log"]}
#  </record>
#  remove_keys log
#</filter>

#
# Separate NGINX logs by type (access, error)
#
#<match docker.idp_{proxy,ssl-proxy}.**>
#  @type rewrite_tag_filter
#  <rule>
#    key source
#    pattern /^stdout$/
#    tag nginx.access
#  </rule>
#  <rule>
#    key source
#    pattern /^stderr$/
#    tag nginx.error
#  </rule>
#</match>

#
# Tag NGINX logs as (e.g. ssl-proxy_access_log, proxy_error_log, etc)
#
#<match nginx.**>
#  @type file
#  @log_level debug
#  path /var/log/umbc-idp/proxy/${logfile}/${tag}
#  symlink_path /var/log/umbc-idp/proxy/links/${logfile}_${tag}.log
#  <format>
#    @type single_value
#    message_key message
#  </format>
#  <buffer tag,time,logfile>
#    @type file
#  </buffer>
##  @type rewrite_tag_filter
##  <rule>
##    key logfile
##    pattern /^idp_([^\.]+)\.log$/
##    tag $1_${tag_parts[1]}_log
##  </rule>
#</match>

#<match nginx.error>
#  @type stdout
#</match>

<match {docker,kubernetes}.**>
  @type rewrite_tag_filter
  <rule>
    key logfile
    pattern /^idp-([a-z]+)\.log$/
    tag idp_$1_log
  </rule>
  <rule>
    key logfile
    pattern /^catalina\.out$/
    tag tomcat_catalina_out
  </rule>
  <rule>
    key logfile
    pattern /^localhost\.log$/
    tag tomcat_localhost_log
  </rule>
  <rule>
    key logfile
    pattern /^console$/
    tag tomcat_console_log
  </rule>
  <rule>
    key logfile
    pattern /^idms-worker\.log$/
    tag idms_worker_log
  </rule>
</match>

#
# Create flat files for benefit of Splunk UF
# Todo
# - try to crunch this down with path placeholders or something similar
#
<match idp_process_log>
  @type file
  path /var/log/umbc-idp/shib/idp_process_log
  symlink_path /var/log/umbc-idp/shib/idp-process.log
  <format>
    @type single_value
    message_key message
  </format>
  <buffer>
    @type file
  </buffer>
</match>

<match idp_audit_log>
  @type file
  path /var/log/umbc-idp/shib/idp_audit_log
  symlink_path /var/log/umbc-idp/shib/idp-audit.log
  <format>
    @type single_value
    message_key message
  </format>
  <buffer>
    @type file
  </buffer>
</match>

<match idp_warn_log>
  @type file
  path /var/log/umbc-idp/shib/idp_warn_log
  symlink_path /var/log/umbc-idp/shib/idp-warn.log
  <format>
    @type single_value
    message_key message
  </format>
  <buffer>
    @type file
  </buffer>
</match>

<match tomcat_catalina_out>
  @type file
  path /var/log/umbc-idp/shib/tomcat/catalina_out
  symlink_path /var/log/umbc-idp/shib/tomcat/catalina.out
  <format>
    @type single_value
    message_key message
  </format>
  <buffer>
    @type file
  </buffer>
</match>

<match tomcat_localhost_log>
  @type file
  path /var/log/umbc-idp/shib/tomcat/localhost_log
  symlink_path /var/log/umbc-idp/shib/tomcat/localhost.log
  <format>
    @type single_value
    message_key message
  </format>
  <buffer>
    @type file
  </buffer>
</match>

<match tomcat_console_log>
  @type file
  path /var/log/umbc-idp/shib/tomcat/console_log
  symlink_path /var/log/umbc-idp/shib/tomcat/console.log
  <format>
    @type single_value
    message_key message
  </format>
  <buffer>
    @type file
  </buffer>
</match>

<match idms_worker_log>
  @type file
  path /var/log/umbc-idp/idms-worker/idms_worker_log
  symlink_path /var/log/umbc-idp/idms-worker/idms-worker.log
  <format>
    @type single_value
    message_key message
  </format>
  <buffer>
    @type file
  </buffer>
</match>

# "Catch-all" sends any unfiltered events to contaniner's stdout
<match **>
  @type stdout
</match>
